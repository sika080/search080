#include <iostream>
#include <filesystem>
#include <string>
#include <vector>
#include <map>
#include <iterator>
#include <sstream>

using namespace std;
namespace fs = filesystem;

bool name_contains_all_keywords(const fs::path& filepath, const vector<string>& keywords) {
    string filename = filepath.filename().string();
    for (const auto& kw : keywords) {
        if (filename.find(kw) == string::npos) {
            return false;
        }
    }
    return true;
}

void search_files(const string& directory, const vector<string>& keywords) {
    map<string, vector<string>> categorized_results;

    try {
        for (auto it = fs::recursive_directory_iterator(
            directory, fs::directory_options::skip_permission_denied);
            it != fs::recursive_directory_iterator(); ++it)
        {
            try {
                const auto& entry = *it;
                if (!entry.is_regular_file()) continue;

                if (name_contains_all_keywords(entry.path(), keywords)) {
                    string ext = entry.path().extension().string();
                    if (ext.empty()) ext = "(no extension)";
                    categorized_results[ext].push_back(entry.path().string());
                }
            }
            catch (const fs::filesystem_error& e) {
                cerr << "[スキップ] " << e.what() << endl;
                continue;
            }
        }
    }
    catch (const fs::filesystem_error& e) {
        cerr << "[フォルダ読み込みエラー] " << e.what() << endl;
    }

    for (const auto& [ext, files] : categorized_results) {
        cout << "--- " << ext << " ---" << endl;
        for (const auto& file : files) {
            cout << file << endl;
        }
        cout << endl;
    }
}

int main() {
    cout << "検索するフォルダ名: ";
    string directory;
    getline(cin, directory);

    cout << "検索キーワード（スペース区切りで詳細検索）: ";
    string input_line;
    getline(cin, input_line);

    istringstream iss(input_line);
    vector<string> keywords{ istream_iterator<string>{iss}, {} };

    search_files(directory, keywords);

    return 0;
}
